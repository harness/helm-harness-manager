apiVersion: v1
kind: ConfigMap
metadata:
  name: harness-manager-config
  namespace: {{ .Release.Namespace }}
  annotations: {}
data:
  ALLOWED_ORIGINS: '{{  .Values.global.loadbalancerURL }}'
  API_URL: '{{  .Values.global.loadbalancerURL }}'
  DELEGATE_METADATA_URL: '{{  .Values.global.loadbalancerURL }}/storage/wingsdelegates/delegateprod.txt'
  UI_SERVER_URL: '{{  .Values.global.loadbalancerURL }}'
  WATCHER_METADATA_URL: '{{  .Values.global.loadbalancerURL }}/storage/wingswatchers/watcherprod.txt'
  {{- if .Values.global.ingress.useSelfSignedCert }}
  LOG_STREAMING_SERVICE_BASEURL: 'http://log-service.{{ .Release.Namespace }}.svc.cluster.local:8079/'
  LOG_STREAMING_SERVICE_EXTERNAL_URL: 'http://log-service.{{ .Release.Namespace }}.svc.cluster.local:8079/'
  {{- else }}
  LOG_STREAMING_SERVICE_BASEURL: 'http://log-service.{{ .Release.Namespace }}.svc.cluster.local:8079/'
  LOG_STREAMING_SERVICE_EXTERNAL_URL: '{{ .Values.global.loadbalancerURL }}/gateway/log-service/'
  {{- end }}
  ATMOSPHERE_BACKEND: REDIS
  BACKGROUND_SCHEDULER_CLUSTERED: "true"
  CACHE_BACKEND: REDIS
  CAPSULE_JAR: rest-capsule.jar
  DELEGATE_DOCKER_IMAGE: {{ include "harness-manager.delegate_docker_image" . }}
  IMMUTABLE_DELEGATE_DOCKER_IMAGE: {{ include "harness-manager.immutable_delegate_docker_image" . }}
  UPGRADER_DOCKER_IMAGE: {{ include "harness-manager.upgrader_docker_image" . }}
  DELEGATE_SERVICE_TARGET: harness-manager:9879
  DELEGATE_SERVICE_AUTHORITY: harness-manager:9879
  DISTRIBUTED_LOCK_IMPLEMENTATION: REDIS
  DEPLOY_MODE: KUBERNETES_ONPREM
  DISABLE_NEW_RELIC: "true"
  ENABLE_G1GC: "true"
  EXTERNAL_GRAPHQL_RATE_LIMIT: '{{ .Values.external_graphql_rate_limit }}'
  FEATURES: {{ include "harness-manager.ffString" . | quote }}
  HAZELCAST_NAMESPACE: '{{ .Release.Namespace }}'
  HAZELCAST_SERVICE: harness-manager
  HZ_CLUSTER_NAME: harness-manager
  LOGGING_LEVEL: '{{ .Values.appLogLevel }}'
  MEMORY: {{ .Values.java.memory | quote }}
  REDIS_SENTINEL: "true"
  REDIS_URL: 'redis://localhost:6379'
  REDIS_MASTER_NAME: 'harness-redis'
  REDIS_SENTINELS: 'redis://redis-sentinel-harness-announce-0.{{ .Release.Namespace }}:26379,redis://redis-sentinel-harness-announce-1.{{ .Release.Namespace }}:26379,redis://redis-sentinel-harness-announce-2.{{ .Release.Namespace }}:26379'
  SERVER_PORT: "9090"
  SERVICE_ACC: /opt/harness/svc/service_acc.json
  VERSION: {{ .Values.version }}
  LOG_STREAMING_SERVICE_TOKEN: c76e567a-b341-404d-a8dd-d9738714eb82
  NG_MANAGER_BASE_URL: 'http://ng-manager:7090/'
  ACCESS_CONTROL_ENABLED: "true"
  ACCESS_CONTROL_BASE_URL: 'http://access-control:9006/api/'
  EVENTS_FRAMEWORK_REDIS_SENTINELS: 'redis://redis-sentinel-harness-announce-0.{{  .Release.Namespace }}:26379,redis://redis-sentinel-harness-announce-1.{{ .Release.Namespace }}:26379,redis://redis-sentinel-harness-announce-2.{{ .Release.Namespace }}:26379'
  EVENTS_FRAMEWORK_SENTINEL_MASTER_NAME: 'harness-redis'
  EVENTS_FRAMEWORK_USE_SENTINEL: "true"
  EVENTS_FRAMEWORK_AVAILABLE_IN_ONPREM: "true"
  EVENTS_FRAMEWORK_REDIS_URL: 'redis://localhost:6379'
  HARNESS_ENABLE_NG_AUTH_UI_PLACEHOLDER: "true"
  {{- if .Values.global.mongoSSL }}
  MONGO_SSL_CONFIG: "true"
  MONGO_SSL_CA_TRUST_STORE_PATH: /opt/harness/keystore.jks
  MONGO_SSL_CA_TRUST_STORE_PASSWORD: password
  {{- end }}
  VERIFICATION_SERVICE_SECRET: 59MR5RlVARcdH7zb7pNx6GzqiglBmXR8
  ENABLE_ITERATORS: 'true'

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: iterator-config
data:
  iterator_config.json: |
    [
      {
        "name": "AlertReconciliation",
        "enabled": true,
        "threadPoolSize": 3,
        "threadPoolIntervalInSeconds": 60,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 600,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "ArtifactCollection",
        "enabled": true,
        "threadPoolSize": 20,
        "threadPoolIntervalInSeconds": 10,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 60,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "ArtifactCleanup",
        "enabled": true,
        "threadPoolSize": 5,
        "threadPoolIntervalInSeconds": 300,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 7200,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "EventDelivery",
        "enabled": true,
        "threadPoolSize": 25,
        "threadPoolIntervalInSeconds": 60,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 5,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "InstanceSync",
        "enabled": true,
        "threadPoolSize": 10,
        "threadPoolIntervalInSeconds": 30,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 600,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "LicenseExpiryCheck",
        "enabled": true,
        "threadPoolSize": 2,
        "threadPoolIntervalInSeconds": 30,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 3600,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "ApprovalPolling",
        "enabled": true,
        "threadPoolSize": 5,
        "threadPoolIntervalInSeconds": 10,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 60,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "GCPBilling",
        "enabled": true,
        "threadPoolSize": 2,
        "threadPoolIntervalInSeconds": 1800,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 3600,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "SegmentGroupEventJob",
        "enabled": true,
        "threadPoolSize": 2,
        "threadPoolIntervalInSeconds": 1800,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 86400,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "BarrierInstanceMonitor",
        "enabled": true,
        "threadPoolSize": 2,
        "threadPoolIntervalInSeconds": 60,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 60,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "EntityAuditRecordProcessor",
        "enabled": true,
        "threadPoolSize": 2,
        "threadPoolIntervalInSeconds": 30,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 1800,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "UsageMetricsHandler",
        "enabled": true,
        "threadPoolSize": 2,
        "threadPoolIntervalInSeconds": 30,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 86400,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "ResourceConstraint-Backup",
        "enabled": true,
        "threadPoolSize": 10,
        "threadPoolIntervalInSeconds": 60,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 30,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "WorkflowExecutionMonitor",
        "enabled": true,
        "threadPoolSize": 5,
        "threadPoolIntervalInSeconds": 10,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 60,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "SettingAttributeValidateConnectivity",
        "enabled": true,
        "threadPoolSize": 5,
        "threadPoolIntervalInSeconds": 600,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 10800,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "VaultSecretManagerRenewalHandler",
        "enabled": true,
        "threadPoolSize": 5,
        "threadPoolIntervalInSeconds": 5,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 31,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "SettingAttributesSecretsMigrationHandler",
        "enabled": true,
        "threadPoolSize": 2,
        "threadPoolIntervalInSeconds": 30,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 1800,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "GitSyncEntityExpiryCheck",
        "enabled": true,
        "threadPoolSize": 2,
        "threadPoolIntervalInSeconds": 600,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 43200,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "ExportExecutionsRequestHandler",
        "enabled": true,
        "threadPoolSize": 3,
        "threadPoolIntervalInSeconds": 60,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 1800,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "ExportExecutionsRequestCleanupHandler",
        "enabled": true,
        "threadPoolSize": 2,
        "threadPoolIntervalInSeconds": 3600,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 2700,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "DeploymentFreezeActivities",
        "enabled": true,
        "threadPoolSize": 3,
        "threadPoolIntervalInSeconds": 0,
        "nextIterationMode": "THROTTLE",
        "targetIntervalInSeconds": 0,
        "throttleIntervalInSeconds": 45
      },
      {
        "name": "DeploymentFreezeDeactivation",
        "enabled": true,
        "threadPoolSize": 3,
        "threadPoolIntervalInSeconds": 0,
        "nextIterationMode": "THROTTLE",
        "targetIntervalInSeconds": 0,
        "throttleIntervalInSeconds": 45
      },
      {
        "name": "CeLicenceExpiryProcessor",
        "enabled": true,
        "threadPoolSize": 2,
        "threadPoolIntervalInSeconds": 86400,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 86400,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "DeleteAccountIterator",
        "enabled": true,
        "threadPoolSize": 2,
        "threadPoolIntervalInSeconds": 60,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 18000,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "DeletedEntityIterator",
        "enabled": true,
        "threadPoolSize": 2,
        "threadPoolIntervalInSeconds": 60,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 43200,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "ResourceLookupTagLinkSync",
        "enabled": true,
        "threadPoolSize": 1,
        "threadPoolIntervalInSeconds": 43200,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 43200,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "AccessRequestHandler",
        "enabled": true,
        "threadPoolSize": 2,
        "threadPoolIntervalInSeconds": 5,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 15,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "ScheduledTrigger",
        "enabled": true,
        "threadPoolSize": 8,
        "threadPoolIntervalInSeconds": 0,
        "nextIterationMode": "THROTTLE",
        "targetIntervalInSeconds": 0,
        "throttleIntervalInSeconds": 45
      },
      {
        "name": "LdapGroupScheduled",
        "enabled": true,
        "threadPoolSize": 8,
        "threadPoolIntervalInSeconds": 0,
        "nextIterationMode": "THROTTLE",
        "targetIntervalInSeconds": 0,
        "throttleIntervalInSeconds": 45
      },
      {
        "name": "EncryptedDataLocalToGcpKmsMigrationHandler",
        "enabled": true,
        "threadPoolSize": 5,
        "threadPoolIntervalInSeconds": 30,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 72000,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "TimeoutEngine",
        "enabled": true,
        "threadPoolSize": 5,
        "threadPoolIntervalInSeconds": 10,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 10,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "GitSyncPollingIterator",
        "enabled": true,
        "threadPoolSize": 2,
        "threadPoolIntervalInSeconds": 60,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 300,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "PerpetualTaskAssignment",
        "enabled": true,
        "threadPoolSize": 5,
        "threadPoolIntervalInSeconds": 60,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 60,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "DelegateDisconnectDetector",
        "enabled": true,
        "threadPoolSize": 2,
        "threadPoolIntervalInSeconds": 60,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 60,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "DelegateTaskFail",
        "enabled": true,
        "threadPoolSize": 2,
        "threadPoolIntervalInSeconds": 30,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 30,
        "throttleIntervalInSeconds": 0
      },
      {
        "name": "DelegateTelemetryPublisherIteration",
        "enabled": true,
        "threadPoolSize": 1,
        "threadPoolIntervalInSeconds": 600,
        "nextIterationMode": "TARGET",
        "targetIntervalInSeconds": 86400,
        "throttleIntervalInSeconds": 0
      }
    ]

